import sys

def nearest_neighbor(graph):
    n = len(graph)
    visited = [False] * n
    tour = [0]  # Start from city 0
    visited[0] = True
    
    for _ in range(n - 1):
        current = tour[-1]
        min_distance = float('inf')
        nearest = None
        
        for i in range(n):
            if not visited[i] and graph[current][i] < min_distance:
                min_distance = graph[current][i]
                nearest = i
        
        tour.append(nearest)
        visited[nearest] = True
    
    tour.append(0)  # Return to the starting city
    return tour

if __name__ == "__main__":
    print("Enter number of vertices:")
    n = int(input())
    graph = []
    
    for i in range(n):
        row = []
        for j in range(n):
            if i != j:
                print("Enter cost of", i, "to", j)
                e = int(input())
                row.append(e)
            else:
                row.append(0)
        graph.append(row)
    
    tour = nearest_neighbor(graph)
    min_cost = 0
    
    for i in range(n):
        min_cost += graph[tour[i - 1]][tour[i]]
        min_cost += graph[tour[i]][tour[0]]
    
    print("Shortest path:", tour)
    print("Min Cost:", min_cost)
============================================================================================================================================================
import time

temp_arr = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
compare_arr = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
x, y, x1, Y1 = 0, 0, 0, 0

def input_Q(input_mat, output_mat):
    print("Enter the start then End at same location matrix")
    for i in range(3):
        for j in range(3):
            print("position", i, j)
            input_mat[i][j] = int(input())
            output_mat[i][j] = int(input())

def find(input_mat, output_mat):
    global x, y, x1, Y1
    for i in range(3):
        for j in range(3):
            if input_mat[i][j] == 0:
                x, y = i, j
            if output_mat[i][j] == 0:
                x1, Y1 = i, j

def ouput_Q(mat):
    print()
    for row in mat:
        print(" ".join(map(str, row)))
    print()

def compare(in_mat, ot_mat):
    count = 0
    for i in range(3):
        for j in range(3):
            if in_mat[i][j] != ot_mat[i][j]:
                count += 1
    return count

def h_value(in_x, in_y, in_mat, ot_mat):
    arr1, arr2, arr3, arr4 = [], [], [], []
    h_value_arr = [0, 0, 0, 0]

    if in_mat[in_x-1][in_y] != 0:
        arr1 = [row[:] for row in in_mat]
        arr1[in_x-1][in_y], arr1[in_x][in_y] = arr1[in_x][in_y], arr1[in_x-1][in_y]
        h_value_arr[0] = compare(arr1, ot_mat)
        ouput_Q(arr1)
    else:
        h_value_arr[0] = 999

    if in_mat[in_x][in_y-1] != 0:
        arr2 = [row[:] for row in in_mat]
        arr2[in_x][in_y-1], arr2[in_x][in_y] = arr2[in_x][in_y], arr2[in_x][in_y-1]
        h_value_arr[1] = compare(arr2, ot_mat)
        ouput_Q(arr2)
    else:
        h_value_arr[1] = 999

    if in_mat[in_x+1][in_y] != 0:
        arr3 = [row[:] for row in in_mat]
        arr3[in_x+1][in_y], arr3[in_x][in_y] = arr3[in_x][in_y], arr3[in_x+1][in_y]
        h_value_arr[2] = compare(arr3, ot_mat)
        ouput_Q(arr3)
    else:
        h_value_arr[2] = 999

    if in_mat[in_x][in_y+1] != 0:
        arr4 = [row[:] for row in in_mat]
        arr4[in_x][in_y+1], arr4[in_x][in_y] = arr4[in_x][in_y], arr4[in_x][in_y+1]
        h_value_arr[3] = compare(arr4, ot_mat)
        ouput_Q(arr4)
    else:
        h_value_arr[3] = 999

    k = h_value_arr.index(min(h_value_arr))
    global temp_arr
    temp_arr = [row[:] for row in [arr1, arr2, arr3, arr4][k] if row]
    return min(h_value_arr)

def astar(g, h, f, in_mat, ot_mat, x_in, y_in):
    if h > 0:
        g += 1
        h = h_value(x, y, in_mat, ot_mat)
        f = g + h
        find(temp_arr, ot_mat)
        compare_arr[x][y] = 1
        time.sleep(2)
        print("---------------------")
        print("\nselected!!!\n")
        ouput_Q(compare_arr)
        print("heuristic value :", h)
        print("G value:", g, "\nF value:", f)
        print("---------------------")
        time.sleep(3)
        x_in, y_in = x, y
        astar(g, h, f, temp_arr, ot_mat, x_in, y_in)

def main():
    input_mat = [[0 for _ in range(3)] for _ in range(3)]
    output_mat = [[0 for _ in range(3)] for _ in range(3)]

    input_Q(input_mat, output_mat)

    global temp_arr
    find(input_mat, output_mat)
    compare_arr[x][y] = 1
    h = compare(input_mat, output_mat)
    print("---------------------")
    print("\nselected!!!\n")
    ouput_Q(compare_arr)
    print("heuristic value :", h)
    print("G value:", 0, "\nF value:", 0)
    print("---------------------")

    astar(0, h, 0, input_mat, output_mat, x, y)

if __name__ == "__main__":
    main()
==========================================================================================================================
def tower_of_hanoi(n, source, auxiliary, destination):
    if n == 1:
        print("Move disk 1 from", source, "to", destination)
        return
    tower_of_hanoi(n-1, source, destination, auxiliary)
    print("Move disk", n, "from", source, "to", destination)
    tower_of_hanoi(n-1, auxiliary, source, destination)

# Get input from the user
n = int(input("Enter the number of disks: "))
source = input("Enter the source peg: ")
auxiliary = input("Enter the auxiliary peg: ")
destination = input("Enter the destination peg: ")

# Call the tower_of_hanoi function with user input
print("Tower of Hanoi solution:")
tower_of_hanoi(n, source, auxiliary, destination)


=================================================================================================
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]

def selection_sort(arr):
    n = len(arr)
    for i in range(n):
        min_idx = i
        for j in range(i+1, n):
            if arr[j] < arr[min_idx]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]

def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i-1
        while j >=0 and key < arr[j] :
                arr[j+1] = arr[j]
                j -= 1
        arr[j+1] = key

def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr)//2
        L = arr[:mid]
        R = arr[mid:]
        merge_sort(L)
        merge_sort(R)
        i=j=k=0
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1
        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1

def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)

# Example usage:
arr = [64, 25, 12, 22, 11]
bubble_sort(arr)
print("Bubble Sorted array is:", arr)

arr = [64, 25, 12, 22, 11]
selection_sort(arr)
print("Selection Sorted array is:", arr)

arr = [64, 25, 12, 22, 11]
insertion_sort(arr)
print("Insertion Sorted array is:", arr)

arr = [64, 25, 12, 22, 11]
merge_sort(arr)
print("Merge Sorted array is:", arr)

arr = [64, 25, 12, 22, 11]
print("Quick Sorted array is:", quick_sort(arr))
=======================================================================================================================
# Set up the game board as a list
board = ["-", "-", "-",
         "-", "-", "-",
         "-", "-", "-"]

# Define a function to print the game board
def print_board():
    print(board[0] + " | " + board[1] + " | " + board[2])
    print(board[3] + " | " + board[4] + " | " + board[5])
    print(board[6] + " | " + board[7] + " | " + board[8])

# Define a function to handle a player's turn
def take_turn(player):
    print(player + "'s turn.")
    position = input("Choose a position from 1-9: ")
    while position not in ["1", "2", "3", "4", "5", "6", "7", "8", "9"]:
        position = input("Invalid input. Choose a position from 1-9: ")
    position = int(position) - 1
    while board[position] != "-":
        position = int(input("Position already taken. Choose a different position: ")) - 1
    board[position] = player
    print_board()

# Define a function to check if the game is over
def check_game_over():
    # Check for a win
    if (board[0] == board[1] == board[2] != "-") or \
       (board[3] == board[4] == board[5] != "-") or \
       (board[6] == board[7] == board[8] != "-") or \
       (board[0] == board[3] == board[6] != "-") or \
       (board[1] == board[4] == board[7] != "-") or \
       (board[2] == board[5] == board[8] != "-") or \
       (board[0] == board[4] == board[8] != "-") or \
       (board[2] == board[4] == board[6] != "-"):
        return "win"
    # Check for a tie
    elif "-" not in board:
        return "tie"
    # Game is not over
    else:
        return "play"

# Define the main game loop
def play_game():
    print_board()
    current_player = "X"
    game_over = False
    while not game_over:
        take_turn(current_player)
        game_result = check_game_over()
        if game_result == "win":
            print(current_player + " wins!")
            game_over = True
        elif game_result == "tie":
            print("It's a tie!")
            game_over = True
        else:
            # Switch to the other player
            current_player = "O" if current_player == "X" else "X"

# Start the game
play_game()

==========================================================================================================
count = Counter(tag for _ , tag in pos_tagged)
print(count)
